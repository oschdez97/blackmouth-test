basePath: /api/v1
definitions:
  model.GameSession:
    properties:
      id:
        type: integer
      player_list:
        items:
          $ref: '#/definitions/model.Player'
        type: array
      queue_id:
        type: integer
      status:
        type: integer
    type: object
  model.Player:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.PostGameSession:
    properties:
      player_id:
        type: integer
      queue_id:
        type: integer
    type: object
  model.PostPlayer:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.PostQueue:
    properties:
      capacity:
        type: integer
      name:
        type: string
    required:
    - capacity
    - name
    type: object
  model.PutQueue:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  model.Queue:
    properties:
      capacity:
        type: integer
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: oschdez97@gmail.com
    name: Oscar Hernandez
  description: A game management service API in Go using Gin framework.
  title: Blackmouth Test Service
  version: "1.0"
paths:
  /gamesession:
    get:
      description: Responds with the list of all gamesessions as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Get gamesession array
      tags:
      - gamesessions
    post:
      description: Takes a player ID and a queue ID JSON and determines if there is
        an open session for that queue, in which case it joins it, otherwise a new
        session is created.
      parameters:
      - description: PostGameSession JSON
        in: body
        name: joindata
        required: true
        schema:
          $ref: '#/definitions/model.PostGameSession'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GameSession'
            type: array
      summary: Take a player and join him in a game session
      tags:
      - gamesessions
  /gamesession/{status}:
    get:
      description: Responds with the list of gamesessions with the given status as
        JSON.
      parameters:
      - description: GameSession status
        in: path
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Get gamesession by status
      tags:
      - gamesessions
  /player:
    get:
      description: Responds with the list of all players as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Get players array
      tags:
      - players
    post:
      description: Takes a player JSON and store in DB.
      parameters:
      - description: Player JSON
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/model.PostPlayer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Store a new player
      tags:
      - players
  /player/{id}:
    delete:
      description: Delete an existing player in DB.
      parameters:
      - description: Player id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Delete a player
      tags:
      - players
    get:
      description: Responds with the player with the given id as JSON.
      parameters:
      - description: Player id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Get player by id
      tags:
      - players
    put:
      description: Update an existing player in DB.
      parameters:
      - description: Player id
        in: path
        name: id
        required: true
        type: string
      - description: Player JSON
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/model.PostPlayer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Player'
            type: array
      summary: Update a player
      tags:
      - players
  /queue:
    get:
      description: Responds with the list of all queues as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Queue'
            type: array
      summary: Get queues array
      tags:
      - queues
    post:
      description: Takes a queue JSON and store in DB.
      parameters:
      - description: Queue JSON
        in: body
        name: queue
        required: true
        schema:
          $ref: '#/definitions/model.PostQueue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Queue'
            type: array
      summary: Store a new queue
      tags:
      - queues
  /queue/{id}:
    delete:
      description: Delete an existing queue in DB.
      parameters:
      - description: Queue id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
      summary: Delete a queue
      tags:
      - queues
    get:
      description: Responds with the queue with the given id as JSON.
      parameters:
      - description: Queue id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Queue'
            type: array
      summary: Get queue by id
      tags:
      - queues
    put:
      description: Update an existing queue in DB.
      parameters:
      - description: Queue id
        in: path
        name: id
        required: true
        type: string
      - description: Queue JSON
        in: body
        name: queue
        required: true
        schema:
          $ref: '#/definitions/model.PutQueue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Queue'
            type: array
      summary: Update a queue
      tags:
      - queues
swagger: "2.0"
